{"version":3,"sources":["components/TitleBanner.js","components/Searchbar.js","Networking.js","App.js","serviceWorker.js","index.js","images/translator.png"],"names":["styles","title_img","display","margin","maxWidth","width","marginBotton","title_text","textAlign","fontWeight","TitleBanner","span","src","style","Search","Input","container","searchbar","answerText","fontSize","marginTop","Searchbar","useState","translatedText","setTranslatedText","onSearch","value","input","fetch","method","mode","cache","redirect","requestTranslation","then","x","json","v","message","text","success","catch","y","error","useEffect","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"+LAKMA,EAAS,CACbC,UAAW,CACTC,QAAS,QACTC,OAAQ,OACRC,SAAU,QACVC,MAAO,OACPC,aAAc,OAGhBC,WAAY,CACVC,UAAW,SACXC,WAAY,YAID,SAASC,IACtB,OACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,IACT,yBAAKC,IAAKX,IAAWY,MAAOb,EAAOC,YACnC,wBAAIY,MAAOb,EAAOO,YAAlB,2C,kCCpBEO,EAAWC,IAAXD,OAEFd,EAAS,CACbgB,UAAW,CACTd,QAAS,QACTC,OAAQ,OACRE,MAAO,OACPD,SAAU,SAEZa,UAAW,CACTf,QAAS,QACTC,OAAQ,OACRE,MAAO,OACPD,SAAU,SAEZc,WAAY,CACVC,SAAU,QACVX,UAAW,SACXC,WAAY,UACZW,UAAW,SAKA,SAASC,IAAa,IAAD,EAEQC,mBAAS,IAFjB,mBAE7BC,EAF6B,KAEbC,EAFa,KAM5BC,EAAW,SAACC,ICnCpB,SAA4BC,GAE1B,OAAOC,MAAM,wEAAD,OAAyED,GAAS,CAC5FE,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,SAAU,YD+BVC,CAAmBP,GAClBQ,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAAOF,MAAK,SAAAG,GACvBb,EAAkBa,EAAEC,QAAQC,KAAK,IACjCD,IAAQE,QAAQ,gCAEjBC,OAAM,SAAAC,GAAC,OAAIJ,IAAQK,MAAM,iDAM5B,OAHAC,qBAAU,kBAAMnB,EAAS,WAAU,IAIjC,yBAAKZ,MAAOb,EAAOgB,WACjB,kBAACF,EAAD,CACC+B,YAAY,+BACZpB,SAAYA,EACZZ,MAAOb,EAAOiB,YAEf,uBAAGJ,MAAOb,EAAOkB,YAAaK,IE1CrBuB,MATf,WACE,OACE,6BACE,kBAACpC,EAAD,MACA,kBAACW,EAAD,QCIc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB,mBErInBC,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.9f030f21.chunk.js","sourcesContent":["import React from 'react';\nimport {Row, Col} from 'antd';\n\nimport title_img from '../images/translator.png';\n\nconst styles = {\n  title_img: {\n    display: 'block',\n    margin: 'auto',\n    maxWidth: '400px',\n    width: '90vw',\n    marginBotton: '5vh'\n  },\n\n  title_text: {\n    textAlign: 'center',\n    fontWeight: 'lighter'\n  }\n}\n\nexport default function TitleBanner() {\n  return (\n  <Row>\n    <Col span={24}>\n      <img src={title_img} style={styles.title_img}  />\n      <h1 style={styles.title_text}>Translate any sentence that you like!</h1>\n    </Col>\n  </Row>\n  )\n}","import React, {useState, useEffect} from 'react';\nimport {Input, message} from 'antd';\n\nimport {requestTranslation} from '../Networking';\n\nconst { Search } = Input;\n\nconst styles = {\n  container: {\n    display: 'block',\n    margin: 'auto',\n    width: '85vw',\n    maxWidth: '500px'\n  },\n  searchbar: {\n    display: 'block',\n    margin: 'auto',\n    width: '70vw',\n    maxWidth: '300px'\n  },\n  answerText: {\n    fontSize: '1.5em',\n    textAlign: 'center',\n    fontWeight: 'lighter',\n    marginTop: '15px'\n\n  }\n}\n\nexport default function Searchbar() {\n\n  let [translatedText, setTranslatedText] = useState('');\n\n\n\n  const onSearch = (value) => {\n\n    requestTranslation(value)\n    .then(x => x.json().then(v => {\n      setTranslatedText(v.message.text[0]);\n      message.success('Translation generated.')\n    }))\n    .catch(y => message.error('There was an error contacting the server.'))\n  }\n\n  useEffect(() => onSearch('Hello'), [])\n\n\n  return(\n    <div style={styles.container}>\n      <Search\n       placeholder=\"input text to translate text\"\n       onSearch = {onSearch}\n       style={styles.searchbar}\n      />\n      <p style={styles.answerText}>{translatedText}</p>\n    </div>\n  )\n}","function requestTranslation(input) {\n\n  return fetch(`https://ameyadaddikar.github.io/Hello-Restful-API/hello?inputMessage=${input}`, {\n    method: 'GET',\n    mode: 'cors',\n    cache: 'no-cache',\n    redirect: 'follow'\n  })\n}\n\nexport {requestTranslation}","import React from 'react';\nimport TitleBanner from './components/TitleBanner';\nimport Searchbar from './components/Searchbar';\n\nfunction App() {\n  return (\n    <div>\n      <TitleBanner />\n      <Searchbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/translator.aafd8235.png\";"],"sourceRoot":""}